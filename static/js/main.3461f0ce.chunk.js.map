{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","className","src","alt","CardList","robots","searchText","filter","toLowerCase","includes","map","robot","key","SearchBox","handleChange","type","placeholder","value","onChange","Scroll","children","style","overflowY","height","App","useState","setRobots","isLoading","state","setState","useEffect","a","fetch","response","json","data","fetchData","length","evt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAYeA,EAVF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,MAAvB,OACX,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BL,EAA1B,qBAAiDM,IAAKL,IAC9D,6BACE,4BAAKC,GACL,2BAAIC,MCQKI,EAZE,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,WAAX,OACf,6BACGD,EACEE,QAAO,qBAAGR,SACAS,cAAcC,SAASH,EAAWE,kBAE5CE,KAAI,SAACC,GAAD,OACH,kBAAC,EAAD,eAAMC,IAAKD,EAAMd,IAAQc,SCMlBE,EAdG,SAAC,GAAkC,IAAhCP,EAA+B,EAA/BA,WAAYQ,EAAmB,EAAnBA,aAC/B,OACE,yBAAKb,UAAU,OACb,2BACEA,UAAU,mCACVc,KAAK,OACLC,YAAY,gBACZC,MAAOX,EACPY,SAAUJ,MCHHK,G,MALA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,yBAAKC,MAAO,CAAEC,UAAW,OAAQC,OAAQ,UAAYH,KCsCxCI,EAnCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTpB,EADS,KACDqB,EADC,OAEUD,mBAAS,CACjCnB,WAAY,GACZqB,WAAW,IAJG,mBAETC,EAFS,KAEFC,EAFE,KAOhBC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACOC,MACrB,8CAFc,cACVC,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBT,EAAUS,GALM,2CAAH,qDAOfC,KACC,IAMH,OAAyB,IAAlB/B,EAAOgC,OACZ,wBAAIpC,UAAU,MAAd,WAEA,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWK,WAAYsB,EAAMtB,WAAYQ,aATxB,SAACwB,GACpBT,EAAS,2BAAKD,GAAN,IAAatB,WAAYgC,EAAIC,OAAOtB,YAS1C,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUZ,OAAQA,EAAQC,WAAYsB,EAAMtB,gBCvBhCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3461f0ce.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, username, email }) => (\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}.png?size=200x200`} alt={name} />\n    <div>\n      <h2>{username}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots, searchText }) => (\n  <div>\n    {robots\n      .filter(({ username }) =>\n        username.toLowerCase().includes(searchText.toLowerCase())\n      )\n      .map((robot) => (\n        <Card key={robot.id} {...robot} />\n      ))}\n  </div>\n);\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchText, handleChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"text\"\n        placeholder=\"search robots\"\n        value={searchText}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => (\n  <div style={{ overflowY: \"auto\", height: \"500px\" }}>{children}</div>\n);\n// border: \"5px solid black\"\n\nexport default Scroll;\n","import React, { useState, useEffect } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"./components/Scroll\";\n\nconst App = () => {\n  const [robots, setRobots] = useState([]);\n  const [state, setState] = useState({\n    searchText: \"\",\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      const data = await response.json();\n      setRobots(data);\n    };\n    fetchData();\n  }, []);\n\n  const handleChange = (evt) => {\n    setState({ ...state, searchText: evt.target.value });\n  };\n\n  return robots.length === 0 ? (\n    <h1 className=\"tc\">Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchText={state.searchText} handleChange={handleChange} />\n      <Scroll>\n        <CardList robots={robots} searchText={state.searchText} />\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}