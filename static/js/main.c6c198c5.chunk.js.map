{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","redux/actions/changeSearchText.js","redux/types.js","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","redux/actions/fetchRobots.js","App.js","serviceWorker.js","redux/reducers/robotReducer.js","redux/reducers/searchReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Card","id","name","username","email","className","src","alt","connect","state","searchText","robots","filter","toLowerCase","includes","map","robot","key","changeSearchText","txt","type","payload","dispatch","placeholder","value","onChange","evt","target","Scroll","children","style","overflowY","height","ErrorBoundary","props","hasError","error","errorInfo","console","log","this","React","Component","fetchRobots","data","useEffect","a","fetch","response","json","fetchData","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","robotReducer","action","searchReducer","combineReducers","middlewares","logger","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c6c198c5.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, username, email }) => (\n  <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n    <img src={`https://robohash.org/${id}.png?size=200x200`} alt={name} />\n    <div>\n      <h2>{username}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport { connect } from \"react-redux\";\n\nconst CardList = ({ robots, searchText }) => (\n  <div>\n    {robots\n      .filter(\n        ({ username }) =>\n          username.toLowerCase().includes(searchText.toLowerCase()) //.toLowerCase()\n      )\n      .map((robot) => (\n        <Card key={robot.id} {...robot} />\n      ))}\n  </div>\n);\n\nconst mapStateToProps = (state) => {\n  return { searchText: state.searchText };\n};\n\nexport default connect(mapStateToProps)(CardList);\n","import { CHANGE_SEARCH_TEXT } from \"../types\";\n\nconst changeSearchText = (txt) => ({\n  type: CHANGE_SEARCH_TEXT,\n  payload: txt,\n});\n\nexport default changeSearchText;\n","export const CHANGE_SEARCH_TEXT = \"CHANGE_SEARCH_TEXT\";\nexport const FETCH_ROBOTS = \"FETCH_ROBOTS\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport changeSearchText from \"../redux/actions/changeSearchText\";\n\nconst SearchBox = ({ searchText, changeSearchText }) => (\n  <div className=\"pa2\">\n    <input\n      className=\"pa3 ba b--green bg-lightest-blue\"\n      type=\"text\"\n      placeholder=\"search robots\"\n      value={searchText}\n      // onChange={(evt) => dispatch(changeSearchText(evt.target.value))}\n      onChange={(evt) => changeSearchText(evt.target.value)}\n    />\n  </div>\n);\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeSearchText: (txt) => dispatch(changeSearchText(txt)),\n});\n\nconst mapStateToProps = (state) => ({ searchText: state.searchText });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBox);\n","import React from \"react\";\n\nconst Scroll = ({ children }) => (\n  <div style={{ overflowY: \"auto\", height: \"500px\" }}>{children}</div>\n);\n// border: \"5px solid black\"\n\nexport default Scroll;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { FETCH_ROBOTS } from \"../types\";\n\nconst fetchRobots = (data) => ({\n  type: FETCH_ROBOTS,\n  payload: data,\n});\n\nexport default fetchRobots;\n","import React, { useEffect } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport { connect } from \"react-redux\";\nimport fetchRobots from \"./redux/actions/fetchRobots\";\n\nconst App = ({ robots, dispatch }) => {\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      const data = await response.json();\n      dispatch(fetchRobots(data));\n    };\n    fetchData();\n  }, [dispatch]);\n\n  return robots.length === 0 ? (\n    <h1 className=\"tc\">Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={robots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ robots }) => ({\n  robots,\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_ROBOTS } from \"../types\";\n\nconst robotReducer = (state = [], action) => {\n  switch (action.type) {\n    case FETCH_ROBOTS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default robotReducer;\n","import { CHANGE_SEARCH_TEXT } from \"../types\";\n\nconst initialState = \"\";\n\nconst searchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_TEXT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import { combineReducers } from \"redux\";\nimport robotReducer from \"./robotReducer\";\nimport searchReducer from \"./searchReducer\";\n\nexport default combineReducers({\n  searchText: searchReducer,\n  robots: robotReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./reducers/\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst middlewares = [logger];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}